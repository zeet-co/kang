// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package v0

import (
	"context"

	"github.com/Khan/genqlient/graphql"
	"github.com/google/uuid"
)

// __deleteRepoInput is used internally by genqlient
type __deleteRepoInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __deleteRepoInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteRepoInput) GetId() uuid.UUID { return v.Id }

// __duplicateProjectInput is used internally by genqlient
type __duplicateProjectInput struct {
	Id         uuid.UUID `json:"id"`
	GroupID    uuid.UUID `json:"groupID"`
	SubGroupID uuid.UUID `json:"subGroupID"`
	Name       string    `json:"name"`
}

// GetId returns __duplicateProjectInput.Id, and is useful for accessing the field via an interface.
func (v *__duplicateProjectInput) GetId() uuid.UUID { return v.Id }

// GetGroupID returns __duplicateProjectInput.GroupID, and is useful for accessing the field via an interface.
func (v *__duplicateProjectInput) GetGroupID() uuid.UUID { return v.GroupID }

// GetSubGroupID returns __duplicateProjectInput.SubGroupID, and is useful for accessing the field via an interface.
func (v *__duplicateProjectInput) GetSubGroupID() uuid.UUID { return v.SubGroupID }

// GetName returns __duplicateProjectInput.Name, and is useful for accessing the field via an interface.
func (v *__duplicateProjectInput) GetName() string { return v.Name }

// __getGroupInput is used internally by genqlient
type __getGroupInput struct {
	Path string `json:"path"`
}

// GetPath returns __getGroupInput.Path, and is useful for accessing the field via an interface.
func (v *__getGroupInput) GetPath() string { return v.Path }

// __getRepoInput is used internally by genqlient
type __getRepoInput struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns __getRepoInput.Id, and is useful for accessing the field via an interface.
func (v *__getRepoInput) GetId() uuid.UUID { return v.Id }

// __updateProjectBranchInput is used internally by genqlient
type __updateProjectBranchInput struct {
	Id     uuid.UUID `json:"id"`
	Branch string    `json:"branch"`
}

// GetId returns __updateProjectBranchInput.Id, and is useful for accessing the field via an interface.
func (v *__updateProjectBranchInput) GetId() uuid.UUID { return v.Id }

// GetBranch returns __updateProjectBranchInput.Branch, and is useful for accessing the field via an interface.
func (v *__updateProjectBranchInput) GetBranch() string { return v.Branch }

// deleteRepoResponse is returned by deleteRepo on success.
type deleteRepoResponse struct {
	DeleteRepo bool `json:"deleteRepo"`
}

// GetDeleteRepo returns deleteRepoResponse.DeleteRepo, and is useful for accessing the field via an interface.
func (v *deleteRepoResponse) GetDeleteRepo() bool { return v.DeleteRepo }

// duplicateProjectDuplicateProjectRepo includes the requested fields of the GraphQL type Repo.
type duplicateProjectDuplicateProjectRepo struct {
	// - v0.RepoID
	Id uuid.UUID `json:"id"`
}

// GetId returns duplicateProjectDuplicateProjectRepo.Id, and is useful for accessing the field via an interface.
func (v *duplicateProjectDuplicateProjectRepo) GetId() uuid.UUID { return v.Id }

// duplicateProjectResponse is returned by duplicateProject on success.
type duplicateProjectResponse struct {
	// Create a copy of a repo, optionally specifying the target project and project environment
	DuplicateProject duplicateProjectDuplicateProjectRepo `json:"duplicateProject"`
}

// GetDuplicateProject returns duplicateProjectResponse.DuplicateProject, and is useful for accessing the field via an interface.
func (v *duplicateProjectResponse) GetDuplicateProject() duplicateProjectDuplicateProjectRepo {
	return v.DuplicateProject
}

// getGroupProject includes the requested fields of the GraphQL type Project.
type getGroupProject struct {
	// - v0.ProjectID or v1.GroupID
	Id           uuid.UUID                                       `json:"id"`
	Name         string                                          `json:"name"`
	Environments []getGroupProjectEnvironmentsProjectEnvironment `json:"environments"`
}

// GetId returns getGroupProject.Id, and is useful for accessing the field via an interface.
func (v *getGroupProject) GetId() uuid.UUID { return v.Id }

// GetName returns getGroupProject.Name, and is useful for accessing the field via an interface.
func (v *getGroupProject) GetName() string { return v.Name }

// GetEnvironments returns getGroupProject.Environments, and is useful for accessing the field via an interface.
func (v *getGroupProject) GetEnvironments() []getGroupProjectEnvironmentsProjectEnvironment {
	return v.Environments
}

// getGroupProjectEnvironmentsProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type getGroupProjectEnvironmentsProjectEnvironment struct {
	// - v0.EnvironmentID or v1.SubGroupID
	Id    uuid.UUID                                                `json:"id"`
	Name  string                                                   `json:"name"`
	Repos []getGroupProjectEnvironmentsProjectEnvironmentReposRepo `json:"repos"`
}

// GetId returns getGroupProjectEnvironmentsProjectEnvironment.Id, and is useful for accessing the field via an interface.
func (v *getGroupProjectEnvironmentsProjectEnvironment) GetId() uuid.UUID { return v.Id }

// GetName returns getGroupProjectEnvironmentsProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *getGroupProjectEnvironmentsProjectEnvironment) GetName() string { return v.Name }

// GetRepos returns getGroupProjectEnvironmentsProjectEnvironment.Repos, and is useful for accessing the field via an interface.
func (v *getGroupProjectEnvironmentsProjectEnvironment) GetRepos() []getGroupProjectEnvironmentsProjectEnvironmentReposRepo {
	return v.Repos
}

// getGroupProjectEnvironmentsProjectEnvironmentReposRepo includes the requested fields of the GraphQL type Repo.
type getGroupProjectEnvironmentsProjectEnvironmentReposRepo struct {
	// - v0.RepoID
	Id      uuid.UUID `json:"id"`
	Enabled bool      `json:"enabled"`
	Name    string    `json:"name"`
}

// GetId returns getGroupProjectEnvironmentsProjectEnvironmentReposRepo.Id, and is useful for accessing the field via an interface.
func (v *getGroupProjectEnvironmentsProjectEnvironmentReposRepo) GetId() uuid.UUID { return v.Id }

// GetEnabled returns getGroupProjectEnvironmentsProjectEnvironmentReposRepo.Enabled, and is useful for accessing the field via an interface.
func (v *getGroupProjectEnvironmentsProjectEnvironmentReposRepo) GetEnabled() bool { return v.Enabled }

// GetName returns getGroupProjectEnvironmentsProjectEnvironmentReposRepo.Name, and is useful for accessing the field via an interface.
func (v *getGroupProjectEnvironmentsProjectEnvironmentReposRepo) GetName() string { return v.Name }

// getGroupResponse is returned by getGroup on success.
type getGroupResponse struct {
	// - v0.ProjectID or v1.GroupID
	Project getGroupProject `json:"project"`
}

// GetProject returns getGroupResponse.Project, and is useful for accessing the field via an interface.
func (v *getGroupResponse) GetProject() getGroupProject { return v.Project }

// getRepoRepo includes the requested fields of the GraphQL type Repo.
type getRepoRepo struct {
	// - v0.RepoID
	Id                   uuid.UUID                       `json:"id"`
	Name                 string                          `json:"name"`
	Owner                getRepoRepoOwnerUser            `json:"owner"`
	Project              getRepoRepoProject              `json:"project"`
	ProjectEnvironment   getRepoRepoProjectEnvironment   `json:"projectEnvironment"`
	ProductionDeployment getRepoRepoProductionDeployment `json:"productionDeployment"`
}

// GetId returns getRepoRepo.Id, and is useful for accessing the field via an interface.
func (v *getRepoRepo) GetId() uuid.UUID { return v.Id }

// GetName returns getRepoRepo.Name, and is useful for accessing the field via an interface.
func (v *getRepoRepo) GetName() string { return v.Name }

// GetOwner returns getRepoRepo.Owner, and is useful for accessing the field via an interface.
func (v *getRepoRepo) GetOwner() getRepoRepoOwnerUser { return v.Owner }

// GetProject returns getRepoRepo.Project, and is useful for accessing the field via an interface.
func (v *getRepoRepo) GetProject() getRepoRepoProject { return v.Project }

// GetProjectEnvironment returns getRepoRepo.ProjectEnvironment, and is useful for accessing the field via an interface.
func (v *getRepoRepo) GetProjectEnvironment() getRepoRepoProjectEnvironment {
	return v.ProjectEnvironment
}

// GetProductionDeployment returns getRepoRepo.ProductionDeployment, and is useful for accessing the field via an interface.
func (v *getRepoRepo) GetProductionDeployment() getRepoRepoProductionDeployment {
	return v.ProductionDeployment
}

// getRepoRepoOwnerUser includes the requested fields of the GraphQL type User.
type getRepoRepoOwnerUser struct {
	Login string `json:"login"`
}

// GetLogin returns getRepoRepoOwnerUser.Login, and is useful for accessing the field via an interface.
func (v *getRepoRepoOwnerUser) GetLogin() string { return v.Login }

// getRepoRepoProductionDeployment includes the requested fields of the GraphQL type Deployment.
type getRepoRepoProductionDeployment struct {
	Id        uuid.UUID `json:"id"`
	Endpoints []string  `json:"endpoints"`
}

// GetId returns getRepoRepoProductionDeployment.Id, and is useful for accessing the field via an interface.
func (v *getRepoRepoProductionDeployment) GetId() uuid.UUID { return v.Id }

// GetEndpoints returns getRepoRepoProductionDeployment.Endpoints, and is useful for accessing the field via an interface.
func (v *getRepoRepoProductionDeployment) GetEndpoints() []string { return v.Endpoints }

// getRepoRepoProject includes the requested fields of the GraphQL type Project.
type getRepoRepoProject struct {
	Name string `json:"name"`
}

// GetName returns getRepoRepoProject.Name, and is useful for accessing the field via an interface.
func (v *getRepoRepoProject) GetName() string { return v.Name }

// getRepoRepoProjectEnvironment includes the requested fields of the GraphQL type ProjectEnvironment.
type getRepoRepoProjectEnvironment struct {
	Name string `json:"name"`
}

// GetName returns getRepoRepoProjectEnvironment.Name, and is useful for accessing the field via an interface.
func (v *getRepoRepoProjectEnvironment) GetName() string { return v.Name }

// getRepoResponse is returned by getRepo on success.
type getRepoResponse struct {
	Repo getRepoRepo `json:"repo"`
}

// GetRepo returns getRepoResponse.Repo, and is useful for accessing the field via an interface.
func (v *getRepoResponse) GetRepo() getRepoRepo { return v.Repo }

// updateProjectBranchResponse is returned by updateProjectBranch on success.
type updateProjectBranchResponse struct {
	UpdateProject updateProjectBranchUpdateProjectRepo `json:"updateProject"`
}

// GetUpdateProject returns updateProjectBranchResponse.UpdateProject, and is useful for accessing the field via an interface.
func (v *updateProjectBranchResponse) GetUpdateProject() updateProjectBranchUpdateProjectRepo {
	return v.UpdateProject
}

// updateProjectBranchUpdateProjectRepo includes the requested fields of the GraphQL type Repo.
type updateProjectBranchUpdateProjectRepo struct {
	// - v0.RepoID
	Id uuid.UUID `json:"id"`
}

// GetId returns updateProjectBranchUpdateProjectRepo.Id, and is useful for accessing the field via an interface.
func (v *updateProjectBranchUpdateProjectRepo) GetId() uuid.UUID { return v.Id }

// The query or mutation executed by deleteRepo.
const deleteRepo_Operation = `
mutation deleteRepo ($id: ID!) {
	deleteRepo(id: $id)
}
`

func deleteRepo(
	ctx context.Context,
	client graphql.Client,
	id uuid.UUID,
) (*deleteRepoResponse, error) {
	req := &graphql.Request{
		OpName: "deleteRepo",
		Query:  deleteRepo_Operation,
		Variables: &__deleteRepoInput{
			Id: id,
		},
	}
	var err error

	var data deleteRepoResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by duplicateProject.
const duplicateProject_Operation = `
mutation duplicateProject ($id: UUID!, $groupID: UUID, $subGroupID: UUID, $name: String!) {
	duplicateProject(input: {enabled:true,environmentID:$subGroupID,id:$id,projectID:$groupID,name:$name}) {
		id
	}
}
`

func duplicateProject(
	ctx context.Context,
	client graphql.Client,
	id uuid.UUID,
	groupID uuid.UUID,
	subGroupID uuid.UUID,
	name string,
) (*duplicateProjectResponse, error) {
	req := &graphql.Request{
		OpName: "duplicateProject",
		Query:  duplicateProject_Operation,
		Variables: &__duplicateProjectInput{
			Id:         id,
			GroupID:    groupID,
			SubGroupID: subGroupID,
			Name:       name,
		},
	}
	var err error

	var data duplicateProjectResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getGroup.
const getGroup_Operation = `
query getGroup ($path: String) {
	project(path: $path) {
		id
		name
		environments {
			id
			name
			repos {
				id
				enabled
				name
			}
		}
	}
}
`

func getGroup(
	ctx context.Context,
	client graphql.Client,
	path string,
) (*getGroupResponse, error) {
	req := &graphql.Request{
		OpName: "getGroup",
		Query:  getGroup_Operation,
		Variables: &__getGroupInput{
			Path: path,
		},
	}
	var err error

	var data getGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by getRepo.
const getRepo_Operation = `
query getRepo ($id: UUID) {
	repo(id: $id) {
		id
		name
		owner {
			login
		}
		project {
			name
		}
		projectEnvironment {
			name
		}
		productionDeployment {
			id
			endpoints
		}
	}
}
`

func getRepo(
	ctx context.Context,
	client graphql.Client,
	id uuid.UUID,
) (*getRepoResponse, error) {
	req := &graphql.Request{
		OpName: "getRepo",
		Query:  getRepo_Operation,
		Variables: &__getRepoInput{
			Id: id,
		},
	}
	var err error

	var data getRepoResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by updateProjectBranch.
const updateProjectBranch_Operation = `
mutation updateProjectBranch ($id: ID!, $branch: String) {
	updateProject(input: {id:$id,productionBranch:$branch}) {
		id
	}
}
`

func updateProjectBranch(
	ctx context.Context,
	client graphql.Client,
	id uuid.UUID,
	branch string,
) (*updateProjectBranchResponse, error) {
	req := &graphql.Request{
		OpName: "updateProjectBranch",
		Query:  updateProjectBranch_Operation,
		Variables: &__updateProjectBranchInput{
			Id:     id,
			Branch: branch,
		},
	}
	var err error

	var data updateProjectBranchResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
