// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package v1

import (
	"context"

	"github.com/Khan/genqlient/graphql"
	"github.com/google/uuid"
)

type CreateGroupInput struct {
	TeamId uuid.UUID     `json:"teamId"`
	Name   string        `json:"name"`
	Envs   []EnvVarInput `json:"envs"`
}

// GetTeamId returns CreateGroupInput.TeamId, and is useful for accessing the field via an interface.
func (v *CreateGroupInput) GetTeamId() uuid.UUID { return v.TeamId }

// GetName returns CreateGroupInput.Name, and is useful for accessing the field via an interface.
func (v *CreateGroupInput) GetName() string { return v.Name }

// GetEnvs returns CreateGroupInput.Envs, and is useful for accessing the field via an interface.
func (v *CreateGroupInput) GetEnvs() []EnvVarInput { return v.Envs }

type CreateSubGroupInput struct {
	GroupId uuid.UUID     `json:"groupId"`
	Name    string        `json:"name"`
	Envs    []EnvVarInput `json:"envs"`
}

// GetGroupId returns CreateSubGroupInput.GroupId, and is useful for accessing the field via an interface.
func (v *CreateSubGroupInput) GetGroupId() uuid.UUID { return v.GroupId }

// GetName returns CreateSubGroupInput.Name, and is useful for accessing the field via an interface.
func (v *CreateSubGroupInput) GetName() string { return v.Name }

// GetEnvs returns CreateSubGroupInput.Envs, and is useful for accessing the field via an interface.
func (v *CreateSubGroupInput) GetEnvs() []EnvVarInput { return v.Envs }

type EnvVarInput struct {
	Name   string `json:"name"`
	Value  string `json:"value"`
	Sealed bool   `json:"sealed"`
}

// GetName returns EnvVarInput.Name, and is useful for accessing the field via an interface.
func (v *EnvVarInput) GetName() string { return v.Name }

// GetValue returns EnvVarInput.Value, and is useful for accessing the field via an interface.
func (v *EnvVarInput) GetValue() string { return v.Value }

// GetSealed returns EnvVarInput.Sealed, and is useful for accessing the field via an interface.
func (v *EnvVarInput) GetSealed() bool { return v.Sealed }

// __createGroupInput is used internally by genqlient
type __createGroupInput struct {
	Input CreateGroupInput `json:"input"`
}

// GetInput returns __createGroupInput.Input, and is useful for accessing the field via an interface.
func (v *__createGroupInput) GetInput() CreateGroupInput { return v.Input }

// __createSubGroupInput is used internally by genqlient
type __createSubGroupInput struct {
	Input CreateSubGroupInput `json:"input"`
}

// GetInput returns __createSubGroupInput.Input, and is useful for accessing the field via an interface.
func (v *__createSubGroupInput) GetInput() CreateSubGroupInput { return v.Input }

// createGroupCreateGroup includes the requested fields of the GraphQL type Group.
type createGroupCreateGroup struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns createGroupCreateGroup.Id, and is useful for accessing the field via an interface.
func (v *createGroupCreateGroup) GetId() uuid.UUID { return v.Id }

// createGroupResponse is returned by createGroup on success.
type createGroupResponse struct {
	CreateGroup createGroupCreateGroup `json:"createGroup"`
}

// GetCreateGroup returns createGroupResponse.CreateGroup, and is useful for accessing the field via an interface.
func (v *createGroupResponse) GetCreateGroup() createGroupCreateGroup { return v.CreateGroup }

// createSubGroupCreateSubGroup includes the requested fields of the GraphQL type SubGroup.
type createSubGroupCreateSubGroup struct {
	Id uuid.UUID `json:"id"`
}

// GetId returns createSubGroupCreateSubGroup.Id, and is useful for accessing the field via an interface.
func (v *createSubGroupCreateSubGroup) GetId() uuid.UUID { return v.Id }

// createSubGroupResponse is returned by createSubGroup on success.
type createSubGroupResponse struct {
	CreateSubGroup createSubGroupCreateSubGroup `json:"createSubGroup"`
}

// GetCreateSubGroup returns createSubGroupResponse.CreateSubGroup, and is useful for accessing the field via an interface.
func (v *createSubGroupResponse) GetCreateSubGroup() createSubGroupCreateSubGroup {
	return v.CreateSubGroup
}

// The query or mutation executed by createGroup.
const createGroup_Operation = `
mutation createGroup ($input: CreateGroupInput!) {
	createGroup(input: $input) {
		id
	}
}
`

func createGroup(
	ctx context.Context,
	client graphql.Client,
	input CreateGroupInput,
) (*createGroupResponse, error) {
	req := &graphql.Request{
		OpName: "createGroup",
		Query:  createGroup_Operation,
		Variables: &__createGroupInput{
			Input: input,
		},
	}
	var err error

	var data createGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

// The query or mutation executed by createSubGroup.
const createSubGroup_Operation = `
mutation createSubGroup ($input: CreateSubGroupInput!) {
	createSubGroup(input: $input) {
		id
	}
}
`

func createSubGroup(
	ctx context.Context,
	client graphql.Client,
	input CreateSubGroupInput,
) (*createSubGroupResponse, error) {
	req := &graphql.Request{
		OpName: "createSubGroup",
		Query:  createSubGroup_Operation,
		Variables: &__createSubGroupInput{
			Input: input,
		},
	}
	var err error

	var data createSubGroupResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
